<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_TRYClosedLoopControl_PID" Id="{383498b6-0069-4c29-a33e-f30509bc46b9}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_TRYClosedLoopControl_PID
VAR_INPUT
	ssMethodType: SINT;
	bEnable: BOOL;
	bActivateIntegralController: BOOL;
	fProportionalGain: LREAL;
	fIntegralGain: LREAL;
	fPositionReference: LREAL;
	fPositionFeedback: LREAL;
	bIntegralControllReset: BOOL;
	DerivativeGain: LREAL;
END_VAR
VAR_OUTPUT
	fClosedLoopPosition: LREAL;
	fPositionError: LREAL;
END_VAR
VAR
	rtb_Product1: LREAL;
	rtb_Saturation1: LREAL;
	DiscreteTransferFcn1_tmp: LREAL;
	c_DiscreteTimeIntegrator_DS: LREAL;
	DiscreteTransferFcn1_states: LREAL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[

CASE ssMethodType OF
    0: 
        (* SystemInitialize for Atomic SubSystem: '<Root>/FB_TRYClosedLoopControl_PID' *)
        (* InitializeConditions for DiscreteTransferFcn: '<S1>/Discrete Transfer Fcn1' *)
        DiscreteTransferFcn1_states := 0.0;
        (* InitializeConditions for DiscreteIntegrator: '<S1>/Discrete-Time Integrator' *)
        c_DiscreteTimeIntegrator_DS := 0.0;
        (* End of SystemInitialize for SubSystem: '<Root>/FB_TRYClosedLoopControl_PID' *)
    1: 
        (* Outputs for Atomic SubSystem: '<Root>/FB_TRYClosedLoopControl_PID' *)
        (* Sum: '<S1>/Sum1' *)
        fPositionError := fPositionReference - fPositionFeedback;
        (* DiscreteTransferFcn: '<S1>/Discrete Transfer Fcn1' incorporates:
         *  Product: '<S1>/Product1' *)
        DiscreteTransferFcn1_tmp := (DerivativeGain * fPositionError) - (10.0 * DiscreteTransferFcn1_states);
        (* DiscreteIntegrator: '<S1>/Discrete-Time Integrator' *)

        IF bIntegralControllReset THEN 
            c_DiscreteTimeIntegrator_DS := 0.0;
        END_IF;

        (* Switch: '<S1>/Switch' incorporates:
         *  Constant: '<S1>/Constant'
         *  DiscreteIntegrator: '<S1>/Discrete-Time Integrator' *)

        IF bActivateIntegralController THEN 
            rtb_Product1 := c_DiscreteTimeIntegrator_DS;
        ELSE 
            rtb_Product1 := 0.0;
        END_IF;

        (* End of Switch: '<S1>/Switch' *)
        

        (* Sum: '<S1>/Sum5' incorporates:
         *  DiscreteTransferFcn: '<S1>/Discrete Transfer Fcn1'
         *  Product: '<S1>/Product' *)
        rtb_Product1 := ((fProportionalGain * fPositionError) + rtb_Product1) + (100.0 * DiscreteTransferFcn1_tmp);
        (* Saturate: '<S1>/Saturation1' *)

        IF rtb_Product1 > 1.0 THEN 
            rtb_Saturation1 := 1.0;
        ELSIF rtb_Product1 >= -1.0 THEN 
            rtb_Saturation1 := rtb_Product1;
        ELSE 
            rtb_Saturation1 := -1.0;
        END_IF;

        (* End of Saturate: '<S1>/Saturation1' *)
        

        (* Switch: '<S1>/Switch1' *)

        IF bEnable THEN 
            (* Outport: '<Root>/fClosedLoopPosition' *)
            fClosedLoopPosition := rtb_Saturation1;
        ELSE 
            (* Outport: '<Root>/fClosedLoopPosition' incorporates:
             *  Constant: '<S1>/Constant1' *)
            fClosedLoopPosition := 0.0;
        END_IF;

        (* End of Switch: '<S1>/Switch1' *)
        

        (* Update for DiscreteTransferFcn: '<S1>/Discrete Transfer Fcn1' *)
        DiscreteTransferFcn1_states := DiscreteTransferFcn1_tmp;
        (* Update for DiscreteIntegrator: '<S1>/Discrete-Time Integrator' incorporates:
         *  Product: '<S1>/Divide'
         *  Product: '<S1>/Product2'
         *  Sum: '<S1>/Sum2'
         *  Sum: '<S1>/Sum3' *)
        c_DiscreteTimeIntegrator_DS := (((((rtb_Saturation1 - rtb_Product1) / fProportionalGain) + fPositionError) * fIntegralGain) * 0.6) + c_DiscreteTimeIntegrator_DS;

        IF c_DiscreteTimeIntegrator_DS > 1.0 THEN 
            c_DiscreteTimeIntegrator_DS := 1.0;
        ELSIF c_DiscreteTimeIntegrator_DS < -1.0 THEN 
            c_DiscreteTimeIntegrator_DS := -1.0;
        END_IF;

        (* End of Update for DiscreteIntegrator: '<S1>/Discrete-Time Integrator' *)
        (* End of Outputs for SubSystem: '<Root>/FB_TRYClosedLoopControl_PID' *)
END_CASE;


]]></ST>
    </Implementation>
    <LineIds Name="FB_TRYClosedLoopControl_PID">
      <LineId Id="3" Count="86" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>